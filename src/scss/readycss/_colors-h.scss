@use "sass:map";
@use "sass:string";
@use "functions/to-number" as *;

// Header for colors. @use this in other files instead of _colors.scss!

$colors: (
        "main": #007ACC,
        "accent": #F05454,
        "shade-0": #1E1E1E,
        "shade-1": #222224,
        "shade-2": #333333,
        "shade-3": #3C3C3C,
        "shade-4": #5b5b5b,
        "shade-5": #a7a7a7,
        "shade-6": #C4C4C4,
        "shade-7": #ECECEC,
        "shade-8": #F3F3F3,
        "shade-9": #FFFFFF
);

$palette: (
  "bg": var(--scheme-background),
  "fg": var(--scheme-foreground),
  "mg": var(--scheme-middleground)
);
@each $color-name, $color-value in $colors {
  $palette: map.set($palette, $color-name, var(--color-#{$color-name}));
}

@mixin color-scheme-light() {
  --scheme-background: var(--scheme-shade-9);
  --scheme-foreground: var(--scheme-shade-0);
  
  --scheme-middleground: var(--scheme-shade-7);
  
  @each $color-name, $color-value in $colors {
    @if str-index($color-name, "shade") == 1 {
      --scheme-#{$color-name}: var(--color-#{$color-name});
    }
  }
}

@mixin color-scheme-dark() {
  --scheme-background: var(--scheme-shade-7);
  --scheme-foreground: var(--scheme-shade-0);
  
  --scheme-middleground: var(--scheme-shade-5);
  
  @each $color-name, $color-value in $colors {
    @if str-index($color-name, "shade") == 1 {
      // Invert shade colors
      $id: 9 - to-number(string.slice($color-name, -1));
      --scheme-shade-#{$id}: var(--color-#{$color-name});
    }
  }
}